const { Client, EmbedBuilder } = require('discord.js');
const db = require('../database/database');
const cron = require('node-cron');

// Fun√ß√£o para verificar anivers√°rios todos os dias √†s 12h
function startBirthdayChecker(client) {
    // Agendar tarefa para rodar todos os dias √†s 12:00
    cron.schedule('0 12 * * *', async () => {
        console.log('Verificando anivers√°rios...');
        
        const hoje = new Date();
        const dia = String(hoje.getDate()).padStart(2, '0');
        const mes = String(hoje.getMonth() + 1).padStart(2, '0');
        const dataHoje = `${dia}/${mes}`;
        
        console.log(`Data de hoje: ${dataHoje}`);
        
        // Ler todos os usu√°rios do banco de dados
        const users = db.readAll('users') || {};
        console.log(`Total de usu√°rios no banco: ${Object.keys(users).length}`);
        
        let aniversariantes = 0;
        
        for (const [userId, userData] of Object.entries(users)) {
            if (userData.birthday && userData.birthday === dataHoje) {
                console.log(`üéÇ Encontrado aniversariante: ${userId} - ${userData.birthday}`);
                aniversariantes++;
                await sendBirthdayMessage(client, userId, userData);
            }
        }
        
        console.log(`‚úÖ Verifica√ß√£o conclu√≠da. ${aniversariantes} aniversariantes encontrados.`);
    }, {
        timezone: "America/Sao_Paulo"
    });
}

// Fun√ß√£o para enviar mensagem de parab√©ns
async function sendBirthdayMessage(client, userId, userData) {
    try {
        console.log(`Enviando mensagem de anivers√°rio para ${userId}`);
        
        // Procurar em todos os servidores onde o bot est√°
        for (const [guildId, guild] of client.guilds.cache) {
            const member = await guild.members.fetch(userId).catch(() => {
                console.log(`Usu√°rio ${userId} n√£o encontrado no servidor ${guild.name}`);
                return null;
            });
            
            if (!member) continue;
            
            console.log(`‚úÖ Usu√°rio encontrado no servidor: ${guild.name}`);
            
            // Procurar por um canal adequado
            let channel = guild.channels.cache.find(ch => 
                (ch.name.includes('geral') || ch.name.includes('general') || ch.name.includes('üéâ') || ch.name.includes('chat')) && 
                ch.isTextBased()
            ) || guild.channels.cache.find(ch => 
                ch.isTextBased() && 
                ch.permissionsFor(guild.members.me).has('SendMessages')
            );
            
            if (!channel) {
                console.log(`Nenhum canal adequado encontrado em ${guild.name}`);
                continue;
            }
            
            // Criar embed de parab√©ns
            const birthdayEmbed = new EmbedBuilder()
                .setColor(0xFF69B4)
                .setTitle('PARAB√âNS! üéÇüéâ')
                .setDescription(`**${member.displayName}** est√° comemorando anivers√°rio hoje!`)
                .addFields(
                    { name: 'Aniversariante', value: `${member}`, inline: true },
                    { name: 'Data', value: userData.birthday, inline: true }
                )
                .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 256 }))
                .setFooter({ text: 'Desejamos um feliz anivers√°rio!' })
                .setTimestamp();
            
            await channel.send({ 
                content: `**TODOS VENHAM DESEJAR FELIZ ANIVERS√ÅRIO PARA ${member}!**`,
                embeds: [birthdayEmbed] 
            });
            
            console.log(`Mensagem de anivers√°rio enviada para ${member.displayName} no canal ${channel.name}`);
            break; // Parar ap√≥s enviar em um servidor
        }
        
    } catch (error) {
        console.error('Erro ao enviar mensagem de anivers√°rio:', error);
    }
}

// ‚ö†Ô∏è IMPORTANTE: Para n√£o dar erro como comando, exportamos um objeto vazio
module.exports = {
    // Exporta um objeto vazio para data e execute
    data: null,
    execute: null,
    startBirthdayChecker // Exporta a fun√ß√£o principal
};